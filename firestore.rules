rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.is_admin == true;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
      allow write: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
    }

    // Admin-only collections
    match /activities/{activityId} {
      allow read, write: if isAdmin();
    }

    match /subscriptions/{subscriptionId} {
      allow read, write: if isAdmin();
    }

    match /fonts/{fontId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /_metadata/{docId} {
      allow read, write: if isAdmin();
    }

    match /gift_cards/{cardId} {
      allow read, write: if isAdmin();
    }

    match /type_tools/{toolId} {
      allow read: if true;
      allow write: if isAdmin() && 
        request.resource.data.keys().hasAll([
          'name', 'icon', 'price', 'duration', 'generationLimit', 
          'libraryAccess', 'licenseType', 'devices', 'bgColor',
          'textColor', 'isFree'
        ]);
    }

    match /faqs/{faqId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /legal_documents/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /subscription_packages/{packageId} {
      allow read: if true;
      allow write: if isAdmin() && 
        request.resource.data.keys().hasAll([
          'name', 'price', 'duration', 'generationLimit', 
          'libraryAccess', 'licenseType', 'devices', 'isFree'
        ]);
    }

    // Add this new rule for subscriptions
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
    
    // Profile images rules
    match /profile-images/{userId}/{imageId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
                   && request.auth.uid == userId
                   && request.resource.size < 5 * 1024 * 1024 // 5MB
                   && request.resource.contentType.matches('image/.*');
    }
  }
}